// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mr-linch/go-tg-bot/internal/domain"
	mock "github.com/stretchr/testify/mock"

	store "github.com/mr-linch/go-tg-bot/internal/store"

	tg "github.com/mr-linch/go-tg"
)

// UserQuery is an autogenerated mock type for the UserQuery type
type UserQuery struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *UserQuery) All(ctx context.Context) ([]*domain.User, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.User
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields: ctx
func (_m *UserQuery) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx
func (_m *UserQuery) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields: ids
func (_m *UserQuery) ID(ids ...domain.UserID) store.UserQuery {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 store.UserQuery
	if rf, ok := ret.Get(0).(func(...domain.UserID) store.UserQuery); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserQuery)
		}
	}

	return r0
}

// One provides a mock function with given fields: ctx
func (_m *UserQuery) One(ctx context.Context) (*domain.User, error) {
	ret := _m.Called(ctx)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context) *domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramID provides a mock function with given fields: ids
func (_m *UserQuery) TelegramID(ids ...tg.UserID) store.UserQuery {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 store.UserQuery
	if rf, ok := ret.Get(0).(func(...tg.UserID) store.UserQuery); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserQuery)
		}
	}

	return r0
}

type mockConstructorTestingTNewUserQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserQuery creates a new instance of UserQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserQuery(t mockConstructorTestingTNewUserQuery) *UserQuery {
	mock := &UserQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
