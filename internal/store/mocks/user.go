// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mr-linch/go-tg-bot/internal/domain"
	mock "github.com/stretchr/testify/mock"

	store "github.com/mr-linch/go-tg-bot/internal/store"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, v
func (_m *User) Add(ctx context.Context, v *domain.User) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields:
func (_m *User) Query() store.UserQuery {
	ret := _m.Called()

	var r0 store.UserQuery
	if rf, ok := ret.Get(0).(func() store.UserQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserQuery)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, v, fields
func (_m *User) Update(ctx context.Context, v *domain.User, fields ...string) error {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, v)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User, ...string) error); ok {
		r0 = rf(ctx, v, fields...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUser(t mockConstructorTestingTNewUser) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
