// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mr-linch/go-tg-bot/internal/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/mr-linch/go-tg-bot/internal/service"

	tg "github.com/mr-linch/go-tg"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// AuthViaBot provides a mock function with given fields: ctx, user, opts
func (_m *User) AuthViaBot(ctx context.Context, user *tg.User, opts *service.AuthSignUpOpts) (*domain.User, error) {
	ret := _m.Called(ctx, user, opts)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *tg.User, *service.AuthSignUpOpts) *domain.User); ok {
		r0 = rf(ctx, user, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tg.User, *service.AuthSignUpOpts) error); ok {
		r1 = rf(ctx, user, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Restart provides a mock function with given fields: ctx, user
func (_m *User) Restart(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserLanguage provides a mock function with given fields: ctx, user, lang
func (_m *User) SetUserLanguage(ctx context.Context, user *domain.User, lang string) (bool, error) {
	ret := _m.Called(ctx, user, lang)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User, string) bool); ok {
		r0 = rf(ctx, user, lang)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.User, string) error); ok {
		r1 = rf(ctx, user, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: ctx, user
func (_m *User) Stop(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUser(t mockConstructorTestingTNewUser) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
